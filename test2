#include<iostream>
#include<vector>
#include<string>
using namespace std;

bool IsDum(string s,int begin,int end);
void permutationCore(string s,int path,vector<string>& res);
vector<string> permutation(string s) {
    vector<string> res;
    permutationCore(s,0,res);
    return res;
}
void permutationCore(string s,int path,vector<string>& res) 
{
    if(path==s.size()-1) {
        res.push_back(s);
    return;
    }
    for(int i=path;i<s.size();i++)
    {
        if(IsDum(s,path,i)) continue;
        //选择
        swap(s[path],s[i]);
        //进入下一次选择swap(s[path],s[i]);
        //++path错误，因为path的值会被改变，撤销选择时将path减一也可以
        permutationCore(s,path+1,res);
        //撤销选择
        swap(s[path],s[i]);
    }
    return;
}

bool IsDum(string s,int begin,int end)
{
    for(int i=begin;i<end;i++)
    {
        if(s[i]==s[end]) 
            return true;
    }
    return false;
}

int main()
{
    string s="abcdefg";
    vector<string> res;
    res=permutation(s);
    for(int i:res) cout<<i<<endl;
    return 0;
}
